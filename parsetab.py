
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPleftOPENBRACKETleftCLOSEBRACKETrightUNARYNUMBERADD_OP AFFECT CLOSEBRACE CLOSEBRACKET IDENTIFIER MUL_OP NUMBER OPENBRACE OPENBRACKET PRINT SEMICOLON WHILEprogramme : statementprogramme : statement SEMICOLON programmestatement : assignation\n\t| expressionstatement : structurestatement : PRINT expressionstructure : WHILE expression OPENBRACE programme CLOSEBRACEassignation : IDENTIFIER AFFECT expressionexpression : ADD_OP expression %prec UNARYNUMBERexpression : OPENBRACKET expression CLOSEBRACKETexpression : NUMBERexpression : IDENTIFIERexpression : expression ADD_OP expression\n\t\t| expression MUL_OP expression'
    
_lr_action_items = {'PRINT':([0,12,26,],[6,6,6,]),'IDENTIFIER':([0,6,8,9,11,12,13,14,17,26,],[7,16,16,16,16,7,16,16,16,7,]),'ADD_OP':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,],[8,13,8,-12,8,8,-11,8,8,8,8,13,-12,8,-9,13,13,-13,-14,13,-10,8,]),'OPENBRACKET':([0,6,8,9,11,12,13,14,17,26,],[9,9,9,9,9,9,9,9,9,9,]),'NUMBER':([0,6,8,9,11,12,13,14,17,26,],[10,10,10,10,10,10,10,10,10,10,]),'WHILE':([0,12,26,],[11,11,11,]),'$end':([1,2,3,4,5,7,10,15,16,18,21,22,23,24,25,28,],[0,-1,-3,-4,-5,-12,-11,-6,-12,-9,-2,-13,-14,-8,-10,-7,]),'CLOSEBRACE':([2,3,4,5,7,10,15,16,18,21,22,23,24,25,27,28,],[-1,-3,-4,-5,-12,-11,-6,-12,-9,-2,-13,-14,-8,-10,28,-7,]),'SEMICOLON':([2,3,4,5,7,10,15,16,18,22,23,24,25,28,],[12,-3,-4,-5,-12,-11,-6,-12,-9,-13,-14,-8,-10,-7,]),'MUL_OP':([4,7,10,15,16,18,19,20,22,23,24,25,],[14,-12,-11,14,-12,-9,14,14,14,-14,14,-10,]),'AFFECT':([7,],[17,]),'CLOSEBRACKET':([10,16,18,19,22,23,25,],[-11,-12,-9,25,-13,-14,-10,]),'OPENBRACE':([10,16,18,20,22,23,25,],[-11,-12,-9,26,-13,-14,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,26,],[1,21,27,]),'statement':([0,12,26,],[2,2,2,]),'assignation':([0,12,26,],[3,3,3,]),'expression':([0,6,8,9,11,12,13,14,17,26,],[4,15,18,19,20,4,22,23,24,4,]),'structure':([0,12,26,],[5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_expression_statement','parser5.py',23),
  ('programme -> statement SEMICOLON programme','programme',3,'p_programme_recursive','parser5.py',27),
  ('statement -> assignation','statement',1,'p_statement_statement','parser5.py',31),
  ('statement -> expression','statement',1,'p_statement_statement','parser5.py',32),
  ('statement -> structure','statement',1,'p_statement_structure','parser5.py',36),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',40),
  ('structure -> WHILE expression OPENBRACE programme CLOSEBRACE','structure',5,'p_structure','parser5.py',44),
  ('assignation -> IDENTIFIER AFFECT expression','assignation',3,'p_assignation','parser5.py',48),
  ('expression -> ADD_OP expression','expression',2,'p_expression_unary','parser5.py',52),
  ('expression -> OPENBRACKET expression CLOSEBRACKET','expression',3,'p_expression_bracket','parser5.py',59),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser5.py',63),
  ('expression -> IDENTIFIER','expression',1,'p_expression_id','parser5.py',67),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',71),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',72),
]
